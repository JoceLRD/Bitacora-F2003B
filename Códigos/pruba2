import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

# Parámetros del sistema (puedes modificar estas variables)
M = 5.0            # masa del disco
m = 0.1            # masa de cada cuchilla
R = 1.0            # radio del disco
r = 0.8            # distancia pivote
L = 0.8            # longitud de la cuchilla

# Coeficientes ajustables
b1 = 0         # densidad del pasto cuchilla 1
b2 = 0           # densidad del pasto cuchilla 2
c_disk = 0       # fricción viscosa del disco
c_th1 = 0        # amortiguamiento pivote cuchilla 1
c_th2 = 0        # amortiguamiento pivote cuchilla 2
k1 = 0           # constante de resorte torsional cuchilla 1
k2 = 0           # constante de resorte torsional cuchilla 2
theta01 = 0  # ángulo “full extend” cuchilla 1 (e.g. 90°)
theta02 = 0  # ángulo “full extend” cuchilla 2

# Torque del motor (puede ser función de t)
def tau_motor(t):
    return 2.0

def odes(t, y):
    phi, phidot, th1, dth1, th2, dth2 = y
    
    I_disc = 0.5 * M * R**2
    I_blade = (1/3) * m * L**2
    I_tot = I_disc + 2 * I_blade
    
    # Torque resistivo de cada pala (pasto)
    def tau_res_blade(phi_dot, theta, theta_dot, b):
        disc_term = b * phi_dot * np.sin(theta) * (r*L**2/2 + L**3*np.cos(theta)/3)
        blade_term = (1/3)*b * L**3 * theta_dot * np.sin(theta)
        return disc_term + blade_term
    
    t_res1 = tau_res_blade(phidot, th1, dth1, b1)
    t_res2 = tau_res_blade(phidot, th2, dth2, b2)
    
    # Ecuación de φ̈ incluyendo fricción del disco
    phidd = (tau_motor(t) - (t_res1 + t_res2) - c_disk*phidot) / I_tot
    
    # Ecuación de θ̈ para cada cuchilla con resorte y amortiguamiento
    def theta_ddot(phi_dot, theta, theta_dot, b, c_th, k, theta0):
        cent1 = 0.5 * m * r * L * phi_dot**2 * np.sin(theta)
        cent2 = (1/3) * m * L**2 * phi_dot**2 * np.sin(theta) * np.cos(theta)
        res_blade = (1/2)*b * r * L**2 * phi_dot * np.sin(theta) + (1/3)*b * L**3 * theta_dot * np.sin(theta)
        spring = -k * (theta - theta0)
        damp = -c_th * theta_dot
        return (cent1 + cent2 - res_blade + spring + damp) / I_blade
    
    dth1dd = theta_ddot(phidot, th1, dth1, b1, c_th1, k1, theta01)
    dth2dd = theta_ddot(phidot, th2, dth2, b2, c_th2, k2, theta02)
    
    return [phidot, phidd, dth1, dth1dd, dth2, dth2dd]

# Condiciones iniciales y tiempo
y0 = [0, 0, 0.1, 0, 0.1, 0]
t_span = (0, 3)
t_eval = np.linspace(*t_span, 400)

# Resolver ODE
sol = solve_ivp(odes, t_span, y0, t_eval=t_eval)

# Graficar resultados
# Ángulo del disco
plt.figure()
plt.plot(sol.t, sol.y[0] % (2*np.pi))
plt.ylim(0, 2*np.pi)
plt.xlabel('Tiempo (s)')
plt.ylabel('φ mod 2π (rad)')
plt.title('Disco φ(t) [0,2π]')
plt.grid(True)

# Ángulo cuchilla 1
plt.figure()
plt.plot(sol.t, sol.y[2] % (2*np.pi))
plt.ylim(0, 2*np.pi)
plt.xlabel('Tiempo (s)')
plt.ylabel('θ1 mod 2π (rad)')
plt.title('Cuchilla 1 θ1(t) [0,2π]')
plt.grid(True)

# Ángulo cuchilla 2
plt.figure()
plt.plot(sol.t, sol.y[4] % (2*np.pi))
plt.ylim(0, 2*np.pi)
plt.xlabel('Tiempo (s)')
plt.ylabel('θ2 mod 2π (rad)')
plt.title('Cuchilla 2 θ2(t) [0,2π]')
plt.grid(True)

plt.show()

# Supongamos que 'sol', 'R', 'r', 'L' ya están definidos en el entorno de la sesión
phi    = sol.y[0]
theta1 = sol.y[2]
theta2 = sol.y[4]

# Coordenadas del borde del disco
x_disk = R * np.cos(phi)
y_disk = R * np.sin(phi)

# Coordenadas de la punta de cada cuchilla
x_piv = r * np.cos(phi)
y_piv = r * np.sin(phi)

x_tip1 = x_piv + L * np.cos(phi + theta1)
y_tip1 = y_piv + L * np.sin(phi + theta1)

x_tip2 = x_piv + L * np.cos(phi + theta2)
y_tip2 = y_piv + L * np.sin(phi + theta2)

# 1) Trayectoria del borde del disco
plt.figure()
plt.plot(x_disk, y_disk)
plt.xlabel('x (m)')
plt.ylabel('y (m)')
plt.title('Trayectoria del borde del disco')
plt.axis('equal')
plt.grid(True)

# 2) Trayectoria de la punta de cuchilla 1
plt.figure()
plt.plot(x_tip1, y_tip1)
plt.xlabel('x (m)')
plt.ylabel('y (m)')
plt.title('Trayectoria punta cuchilla 1')
plt.axis('equal')
plt.grid(True)

# 3) Trayectoria de la punta de cuchilla 2
plt.figure()
plt.plot(x_tip2, y_tip2)
plt.xlabel('x (m)')
plt.ylabel('y (m)')
plt.title('Trayectoria punta cuchilla 2')
plt.axis('equal')
plt.grid(True)

plt.show()